<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.geovis.ai.service.BiddingsMapper">
  <resultMap id="BaseResultMap" type="com.geovis.ai.model.Biddings">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="demand_id" jdbcType="INTEGER" property="demandId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="deliver_cycle" jdbcType="VARCHAR" property="deliverCycle" />
    <result column="deliver_time" jdbcType="TIMESTAMP" property="deliverTime" />
    <result column="schedule" jdbcType="TINYINT" property="schedule" />
    <result column="price" jdbcType="INTEGER" property="price" />
    <result column="is_del" jdbcType="TINYINT" property="isDel" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.geovis.ai.model.Biddings">
    <result column="introduction" jdbcType="LONGVARCHAR" property="introduction" />
    <result column="bidding_file" jdbcType="LONGVARCHAR" property="biddingFile" />
    <result column="deliver_file" jdbcType="LONGVARCHAR" property="deliverFile" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, demand_id, user_id, deliver_cycle, deliver_time, schedule, price, is_del, created_at, 
    updated_at
  </sql>
  <sql id="Blob_Column_List">
    introduction, bidding_file, deliver_file
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.geovis.ai.model.BiddingsExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from biddings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.geovis.ai.model.BiddingsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from biddings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from biddings
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from biddings
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.geovis.ai.model.BiddingsExample">
    delete from biddings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.geovis.ai.model.Biddings">
    insert into biddings (id, demand_id, user_id, 
      deliver_cycle, deliver_time, schedule, 
      price, is_del, created_at, 
      updated_at, introduction, bidding_file, 
      deliver_file)
    values (#{id,jdbcType=INTEGER}, #{demandId,jdbcType=INTEGER}, #{userId,jdbcType=BIGINT}, 
      #{deliverCycle,jdbcType=VARCHAR}, #{deliverTime,jdbcType=TIMESTAMP}, #{schedule,jdbcType=TINYINT}, 
      #{price,jdbcType=INTEGER}, #{isDel,jdbcType=TINYINT}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP}, #{introduction,jdbcType=LONGVARCHAR}, #{biddingFile,jdbcType=LONGVARCHAR}, 
      #{deliverFile,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.geovis.ai.model.Biddings">
    insert into biddings
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="demandId != null">
        demand_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="deliverCycle != null">
        deliver_cycle,
      </if>
      <if test="deliverTime != null">
        deliver_time,
      </if>
      <if test="schedule != null">
        schedule,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="isDel != null">
        is_del,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="introduction != null">
        introduction,
      </if>
      <if test="biddingFile != null">
        bidding_file,
      </if>
      <if test="deliverFile != null">
        deliver_file,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="demandId != null">
        #{demandId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="deliverCycle != null">
        #{deliverCycle,jdbcType=VARCHAR},
      </if>
      <if test="deliverTime != null">
        #{deliverTime,jdbcType=TIMESTAMP},
      </if>
      <if test="schedule != null">
        #{schedule,jdbcType=TINYINT},
      </if>
      <if test="price != null">
        #{price,jdbcType=INTEGER},
      </if>
      <if test="isDel != null">
        #{isDel,jdbcType=TINYINT},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="introduction != null">
        #{introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="biddingFile != null">
        #{biddingFile,jdbcType=LONGVARCHAR},
      </if>
      <if test="deliverFile != null">
        #{deliverFile,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.geovis.ai.model.BiddingsExample" resultType="java.lang.Long">
    select count(*) from biddings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update biddings
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.demandId != null">
        demand_id = #{record.demandId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.deliverCycle != null">
        deliver_cycle = #{record.deliverCycle,jdbcType=VARCHAR},
      </if>
      <if test="record.deliverTime != null">
        deliver_time = #{record.deliverTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.schedule != null">
        schedule = #{record.schedule,jdbcType=TINYINT},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=INTEGER},
      </if>
      <if test="record.isDel != null">
        is_del = #{record.isDel,jdbcType=TINYINT},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.introduction != null">
        introduction = #{record.introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.biddingFile != null">
        bidding_file = #{record.biddingFile,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.deliverFile != null">
        deliver_file = #{record.deliverFile,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update biddings
    set id = #{record.id,jdbcType=INTEGER},
      demand_id = #{record.demandId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=BIGINT},
      deliver_cycle = #{record.deliverCycle,jdbcType=VARCHAR},
      deliver_time = #{record.deliverTime,jdbcType=TIMESTAMP},
      schedule = #{record.schedule,jdbcType=TINYINT},
      price = #{record.price,jdbcType=INTEGER},
      is_del = #{record.isDel,jdbcType=TINYINT},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      introduction = #{record.introduction,jdbcType=LONGVARCHAR},
      bidding_file = #{record.biddingFile,jdbcType=LONGVARCHAR},
      deliver_file = #{record.deliverFile,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update biddings
    set id = #{record.id,jdbcType=INTEGER},
      demand_id = #{record.demandId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=BIGINT},
      deliver_cycle = #{record.deliverCycle,jdbcType=VARCHAR},
      deliver_time = #{record.deliverTime,jdbcType=TIMESTAMP},
      schedule = #{record.schedule,jdbcType=TINYINT},
      price = #{record.price,jdbcType=INTEGER},
      is_del = #{record.isDel,jdbcType=TINYINT},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.geovis.ai.model.Biddings">
    update biddings
    <set>
      <if test="demandId != null">
        demand_id = #{demandId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="deliverCycle != null">
        deliver_cycle = #{deliverCycle,jdbcType=VARCHAR},
      </if>
      <if test="deliverTime != null">
        deliver_time = #{deliverTime,jdbcType=TIMESTAMP},
      </if>
      <if test="schedule != null">
        schedule = #{schedule,jdbcType=TINYINT},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=INTEGER},
      </if>
      <if test="isDel != null">
        is_del = #{isDel,jdbcType=TINYINT},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="introduction != null">
        introduction = #{introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="biddingFile != null">
        bidding_file = #{biddingFile,jdbcType=LONGVARCHAR},
      </if>
      <if test="deliverFile != null">
        deliver_file = #{deliverFile,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.geovis.ai.model.Biddings">
    update biddings
    set demand_id = #{demandId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=BIGINT},
      deliver_cycle = #{deliverCycle,jdbcType=VARCHAR},
      deliver_time = #{deliverTime,jdbcType=TIMESTAMP},
      schedule = #{schedule,jdbcType=TINYINT},
      price = #{price,jdbcType=INTEGER},
      is_del = #{isDel,jdbcType=TINYINT},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      introduction = #{introduction,jdbcType=LONGVARCHAR},
      bidding_file = #{biddingFile,jdbcType=LONGVARCHAR},
      deliver_file = #{deliverFile,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.geovis.ai.model.Biddings">
    update biddings
    set demand_id = #{demandId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=BIGINT},
      deliver_cycle = #{deliverCycle,jdbcType=VARCHAR},
      deliver_time = #{deliverTime,jdbcType=TIMESTAMP},
      schedule = #{schedule,jdbcType=TINYINT},
      price = #{price,jdbcType=INTEGER},
      is_del = #{isDel,jdbcType=TINYINT},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>